# Use postgres/example user/password credentials
version: '3.9'

services:

  my-postgres:
    image: postgres
    container_name: my-postgres
    ports:
      - "5432:5432"
    # restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
    - ./create-db.sql:/docker-entrypoint-initdb.d/create_database.sql
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: ax
    
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 10s
 
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  my-backend:
      container_name: my-backend
      build:
        context: ./node-postgres/backend
        dockerfile: Dockerfile
      restart: unless-stopped
      volumes:
      - type: bind
        source: ./node-postgres/backend/src
        target: /app/src
      tty: true
      ports:
        - '3001:3001'
      depends_on: 
        my-postgres:
          condition: service_healthy
          restart: true
          
  my-frontend:
    container_name: my-frontend
    build:
      context: ./node-postgres/frontend
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    working_dir: /app
    volumes:
      - type: bind
        source: ./node-postgres/frontend/src
        target: /app/src
    tty: true
    depends_on: 
      - my-backend


  